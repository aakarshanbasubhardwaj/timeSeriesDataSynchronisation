import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { execFile } from "child_process";
import fs from "fs";
import multer from "multer";
import path from "path";
import archiver from "archiver";

const app = express();

dotenv.config();

app.use(cors());

app.use(express.json()); 

// create uploads directory for multer if it does not exist
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads', { recursive: true });
}

// test route
app.get("/test", (req, res) => {
  res.status(200).json({ message: "test successful" });
});

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);
    const baseName = path.basename(file.originalname, ext);
    cb(null, Date.now() + '-' + baseName + ext);
  }
});

const upload = multer({ storage: storage });

app.post('/syncFiles', upload.fields([
    { name: 'file1', maxCount: 1 },
    { name: 'file2', maxCount: 1 }
  ]), (req, res) => {
  // check if two files are passed
  if (!req.files?.file1 || !req.files?.file2) {
    const uploaded = [...(req.files?.file1 || []), ...(req.files?.file2 || [])];
    uploaded.forEach(file => {
      fs.unlink(file.path, err => {
        if (err) console.error('Failed to delete file:', file.path, err);
      });
    });
    return res.status(400).json({ error: 'Both files are required.' });
  }

  const file1Path = req.files.file1[0].path;
  const file2Path = req.files.file2[0].path;
  // execute python algorithm
  execFile('python3', ['backend.py', file1Path, file2Path], (error, stdout, stderr) => {
    if (error) {
      console.error('Python script error:', stderr);
      [file1Path, file2Path].forEach(file => {
        fs.unlink(file, () => {});
      });
      return res.status(500).json({ error: 'Failed to process files.' });
    } else {
      // delete files
      [file1Path, file2Path].forEach(file => {
        fs.unlink(file, () => {});
      });
    }

    if (!fs.existsSync('sync')) {
      return res.status(404).send('Sync directory not found.');
    }
    // get files generated by the algorithm to send in the response
    const syncFiles = fs.readdirSync('sync');
    if (syncFiles.length === 0) {
      return res.status(404).send('No files to download.');
    }
  
    res.attachment('sync_files.zip');
  
    const archive = archiver('zip', {
      zlib: { level: 9 }
    });
  
    archive.on('error', err => {
      console.error('Archive error:', err);
      return res.status(500).send({ error: 'Failed to create archive.' });
    });
    // delete files after response is sent
    archive.on('end', () => {
      syncFiles.forEach(file => {
        const filePath = path.join('sync', file);
        fs.unlink(filePath, err => {
          if (err) console.error(`Failed to delete file ${filePath}:`, err);
        });
      });
    });
    
    archive.pipe(res);
    // send files in sync directory
    syncFiles.forEach(file => {
      const filePath = path.join('sync', file);
      archive.file(filePath, { name: file });
    });
  
    archive.finalize();
  
  });
});

const port = process.env.PORT || 3333;

// start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});